Сделаны задания:

№10. Введение в веб-разработку на RoR
1. Создал новое rails-приложение
2. Используя scaffolding создал ресурс RailwayStation (как показано в скринкасте)
3. Используя scaffolding создал ресурс Train, который имеет номер в качестве атрибута.

№11. mvc и rest
1. Создал ресурс Маршруты (Routes), для которого возможны все CRUD-операции. 2. Маршрут имеет название, требуется валидация на наличие этого атрибута.
3. Создал ресурс вручную, без ипользования скаффолдинга и других генераторов (генератор можно использовать только для создания миграции).

№12 Связи и ассоциации
1. Модель Маршрут имеет множество станций.
2. Станция может принадлежать множеству маршрутов
3. Поезд может иметь один маршрут, на одном маршруте может быть несколько поездов
4. Билет содержит информацию о (связан с) поезде, начальной и конечной станциях.
5. Билет принадлежит пользователю
6. Пользователь может иметь произвольное кол-во билетов
7. Поезд содержит информацию о билетах на него.
### 8. Реализован пользовательских интерфейс для создания маршрутов и добавления станций в него.

№13
- Сделать вывод списка станций, используя анонимные partials
- Сделать то же самое для списка поездов
- Через layout добавить на все страницы футер, содержащий информацию об авторе (о вас), например "(с) 2015 Иван Иванов. Учебный проект в онлайн-школе Thinknetica" или любую другую подобную информацию.
- Создать интерфейс для создания/удаления/изменения маршрутов. Пока у маршрута может быть только название.
- Из интерфейса должна быть возможность назначать маршрут поезду из списка доступных маршрутов.
- При просмотре поезда, должно быть видно его маршрут или значение "Маршрут не назначен"
- При просмотре маршрута должен выводиться список поездов на этом маршруте.
- Реализовать возможность управления вагонами:
- При добавлении вагона указывается поезд, к которому он добавляется
  Тип вагона (купейный/плацкартный)
  Кол-во мест: Нижних / Верхних
- При просмотре поезда, также должна отображаться информация о кол-ве вагонов: Плацкартных / Купейных и кол-ве мест: Плацкартных верхних/нижних, Купейных верхних/нижних.


№14
Создал ветку, реализовал в ней следюущий функционал:
- Интерфейс просмотра списка проданных билетов. Можно выполнять все стандартные CRUD операции с билетами.
- При создании (или редактировании) билета нужно указать начальную и конечную станции, а также ФИО пассажира (без ассоциации с моделью User)

№15
- Добавил возможность указать порядковый номер станции в маршруте (поле для сортировки). Учел, что одна и та же станция может входить в разные маршруты и иметь разный порядковый номер в разных маршрутах.
- Вывести список станций в маршруте по порядковому номеру (использовал скоуп)

Реализовал через STI следующие типы вагонов:
- Купейный (имеет верхние и нижние места)
- Плацкартный (имеет верхние/нижние места + боковые верхние и нижние)
- СВ (имеет только нижние места)
- Сидячий (имеет только сидячие места)
При добавлении вагона к поезду, автоматически назначается вагону порядковый номер (использовал коллбеки).
Проверяется уникальность номера вагона у поезда. Не может быть ситуации, когда у поезда 2 вагона с номером 11.

- На странице просмотра поезда вывести список номеров вагонов (как ссылки). При переходе по ссылке на конкретный вагон показывать тип вагона и актуальную информацию по нем (кол-во верхних/нижних мест, если есть - боковые и т.п. в зависимости от типа вагона)
- У поезда сделал флаг - сортировка вагона. Значения: с головы/c хвоста поезда. Если выбран вариант “с головы поезда”, то вагоны на странице поезда выводятся в прямом порядке, если “с хвоста поезда” - в обратном.
- Усложненное задание: используя AR Query Interface, реализовал метод в модели Train, который принимает в качестве аргумента тип вагона и тип мест (верхние/нижние/cидячие) и вовзращает их общее кол-во для поезда (т.е. считает по всем вагонам указанного типа).

№16
- Реализовал сортировку станций в маршруте.
- Изменил добавление вагонов на вложенные ресурсы.
- Добавил время прибытия и отправления для каждой станции в маршруте
- Сделал страницу поиска билетов на поезд:

Пользователь выбирает из списка начальную и конечную станцию. Выбирает можно из всех станций, которые есть в системе. Система произвоидт поиск маршрутов по выбранному направлению и предоставляет пользователю список поездов, которые следуют по данному маршруту. Пользователь видит время отправления от начальной станции и время прибытия на конечную. У пользователя есть возможность "купить" билет на поезд. Это кнопка "Купить" рядом с соответсвующим поездом. При нажатии на нее, запрашивается ФИО пассажира для билета, данные паспорта и создается билет, связанный с пользователем и содержащий нужную информацию, после чего билет показывается пользователю. Реализована "покупка" билета через вложенные ресурсы (ресурс билет вложен в ресурс пользователь).

№17
- Подключил аутентификацию через Devise
- Разделил приложение на пользовательскую и административную части. В административную часть имеет доступ только пользователи с правами администратора.
- При покупке билета, билет привязыватется к купившему его пользователю (залогиненному), при этом, id пользователя не передается в параметрах запроса или полях формы, в т.ч. скрытых
- Залогиненный пользователь может посмотреть список всех своих купленных билетов, каждый билет в отдельности, а также удалить билет
- Администратор может просматривать список всех билетов в системе, каждый в отдельности, редактировать билеты и удалять их.

Усложненное задание:
- При регистрации пользователя запрашивается его имя и фамилию и после входа, выводится "Привет, <имя пользователя>!"
- После успешного входа, перенаправляются обычные пользователи на страницу поиска билетов, а админов - на страницу, где перечислены ссылки на управление ресурсами приложения
